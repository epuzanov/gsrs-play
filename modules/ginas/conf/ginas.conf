include "core.conf"

application.context="/ginas/app"
application.router=ix.ginas.Routes
application.appname="ginas"



ix.index.deepfields = ["ix.ginas.models.v1.Substance"]

#
# override to use only those models that we need
#
ebean.default="ix.core.adapters.*,ix.core.models.*,ix.ginas.models.*,ix.ginas.controllers.plugins.*"
#ebean.default2="ix.ginas.secondarymodels.*"

application.global=ix.ginas.utils.GinasGlobal

api.version="1.0"
swagger.api.basepath="http://localhost:9000"


#Use This impl for MySQL
#ix.ginas.PersistRecordWorkerFactoryImpl = "ix.core.plugins.SingleThreadedPersistRecordWorkerFactory"
ix.ginas.PersistRecordWorkerFactoryImpl = "ix.core.plugins.MultiThreadedPersistRecordWorkerFactory"

#List of ExportFactory classes that can export Substances
#the list of classes is ordered by priority
#if more than one Exporter supports the same file extension,
#the class in the list that supports it fist wins.
ix.ginas.exportFactories = ["ix.ginas.exporters.SdfExporterFactory", "ix.ginas.exporters.DefaultSubstanceSpreadsheetExporterFactory", "ix.ginas.exporters.JsonExporterFactory"]


#ix.tokenexpiretime=30000
ix.core.files.persist.location="<DB>"
ix.core.files.persist.maxsize="30MB"

ix.core.resourcefilter="ix.core.PopulatedResourceFilter"

ix.core.users=[
	{
		"username":"admin",
		"email":"",
		"password":"admin",
		"roles":["Query", "DataEntry","SuperDataEntry", "Updater","SuperUpdate", "Admin"]
	}
]


ix.core.searchanalyzers = [
    	{
		"class":"ix.ginas.models.v1.Substance",
		"analyzer":"ix.core.search.ExplicitFieldSubstanceSearchAnalyzer",
		"with":{
			"maxanalyze":50
		}
	}
]

ix.home="ginas.ix"
ix.app="ginas"
ix.debug=1
ix.ginas.debug.profile=false
ix.ginas.debug.showheaders=false

#CUSTOM VALIDATOR - This is not implemented yet
#ix.ginas.validator=ix.ginas.utils.SubstanceValidator

#ix.ginas.loader=old
ix.ginas.hazelcast=false
# this needs to be at least 1
ix.ginas.maxrecordqueue=2
ix.ginas.allowloading=true

#extract locators like "[INN]" from names, and add as references
ix.ginas.prepare.extractlocators=false

#set this to "true" to allow all users (authenticated or not) to behave as admins
ix.admin=false

ix.ginas.batch.validation=true
ix.ginas.batch.persist=true
ix.textindex.enabled=true
ix.textindex.fieldsuggest=true

# For debugging only, adds a delay to each fetch
# for a record
ix.settings.debug.dbdelay=0
# For debugging only, adds a delay to each processing of
# a Structure / Sequence record
ix.settings.debug.processordelay=0


ix.ginas.codes.order=[
	"BDNUM",
	"CAS",
	"WHO-ATC",
	"EVMPD",
	"NCI"
]


# This is the info for the admin contact
# to be used when access is not granted to a user
#
#
#ix.sysadmin={
#"username":"adminusername",
#"email":"display@email.com"
#}

ix.core.exactsearchfields=[
	{
		"class":"ix.ginas.models.v1.Substance",
		"fields":[
			"root_names_name",
			"root_approvalID",
			"root_codes_CAS"
		]
	}
]


ix.ginas.facets.substance.default=[
	  	"Substance Class",
        "Molecular Weight",
        "GInAS Tag",
        "Relationships",
        "Code System",
        "Material Type",
        "Family",
        "Parts",
        "Protein Type",
				"root_approved",
				"root_lastEdited",
				"Record Level Access",
				"Display Name Level Access"
				"Definition Level Access"
]

# Additional indexing operations can be supplied here
# Below is an example, where the fully qualified class
# name of an IndexValueMaker is specified for Substances.
#
# In order for the facets that it makes to appear in
# the UI by default, they would also have to be added
# as is done below
ix.core.indexValueMakers=[
	{
#		"class":"ix.ginas.models.v1.Substance",
#		"indexer":"ix.ginas.indexers.ExampleValueMaker"

		"class":"ix.ginas.models.v1.Substance",
		"indexer":"ix.ginas.indexers.RecordAccessIndexValueMaker"
	}
]
#
# Explicitly add those facets you'd like to show
##ix.ginas.facets.substance.default+="Simple Ring Count"
##ix.ginas.facets.substance.default+="Carbon Mass Ratio"
#ix.ginas.facets.substance.default+="Moiety Type"
##ix.ginas.facets.substance.default+="Relationship Count"

ix.api.registeredfunctions=[
	{
		"class":"ix.core.util.pojopointer.extensions.StringLengthRegisteredFunction"
	},
	{
		"class":"ix.core.util.pojopointer.extensions.InChIRegisteredFunction"
	}
	,
	{
		"class":"ix.core.util.pojopointer.extensions.StringSplitRegisteredFunction"
	},
	{
		"class":"ix.core.util.pojopointer.extensions.SelectRegisteredFunction"
	},
	{
		"class":"ix.core.util.pojopointer.extensions.StringJoinRegisteredFunction"
	}
	
]

ix.core.entityprocessors=[
	# this ensures consistency across alternative definitions
	# also use by FDA. FDA modifies this class
	{
		"class":"ix.ginas.models.v1.Substance",
		"processor":"ix.ginas.processors.SubstanceProcessor"
	},
	{
		"class":"ix.ginas.models.v1.Substance",
		"processor":"ix.ginas.processors.PublicCleanProcessor"
	},
	#{
    #	"class":"ix.ginas.models.v1.Substance",
	#	"processor":"ix.ginas.processors.LegacyAuditInfoProcessor"
	#},
	{
    	"class":"ix.ginas.models.v1.Substance",
		"processor":"ix.ginas.processors.PublicTagFlagger"
	},
	{
		"class":"ix.ginas.models.v1.Relationship",
		"processor":"ix.ginas.processors.RelationshipProcessor"
	},
    # GenerateURLs for codes if need be
    #{
    #            "class":"ix.ginas.models.v1.Code",
    #            "processor":"ix.ginas.processors.CodeProcessor"
    #},

	# when a new group is added, this ensures that new group is added to controlled vocabulary
	{
		"class":"ix.core.models.Group",
		"processor":"ix.ginas.processors.GroupProcessor"
	},
	# when a new controlled vocabulary added, it ensures adding a new group
	{
		"class":"ix.ginas.models.v1.ControlledVocabulary",
		"processor":"ix.ginas.processors.CVProcessor"
	},
	# when updating a user profile, this class ensures to update the token
	{
		"class":"ix.core.models.UserProfile",
		"processor":"ix.ncats.processors.UserProfileProcessor"
	}
	//
]

## START AUTHENTICATION

# SSO HTTP proxy authentication settings - right now this is only used by FDA
#ix.authentication.trustheader=true
#ix.authentication.usernameheader="AUTHENTICATION_HEADER_NAME"
#ix.authentication.useremailheader="AUTHENTICATION_HEADER_NAME_EMAIL"

# set this "false" to only allow authenticated users to see the application
ix.authentication.allownonauthenticated=true

# set this "true" to allow any user that authenticates to be registered
# as a user automatically
ix.authentication.autoregister=true

#Set this to "true" to allow autoregistered users to be active as well
ix.authentication.autoregisteractive=false
## END AUTHENTICATION

################
#H2 example
db.default.driver=org.h2.Driver
db.default.url="jdbc:h2:"${ix.home}"/h2/ginas;MVCC=true"
db.default.user=sa
db.default.password=""
#END H2 example
################

